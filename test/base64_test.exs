defmodule Base64Test do
  use ExUnit.Case
  alias OpenpgpTools.Base64, as: B64

  ## Tests for to_binl function

  # feed function with empty list
  test "to_binl_empty_list" do
    assert_raise(RuntimeError, "Error: no data to convert",
                 fn -> B64.to_binl([]) end )
  end

  # feed function with reference data
  test "to_binl_refdata" do
    refarm = ["-----BEGIN PGP MESSAGE-----",
              "Version: OpenPrivacy 0.99",
              "",
              "yDgBO22WxBHv7O8X7O/jygAEzol56iUKiXmV+XmpCtmpqQUKiQrFqclFqUDBovzS",
              "vBSFjNSiVHsuAA==",
              "=njUN",
              "-----END PGP MESSAGE-----"]
    e_bdt_l = [<<0xc8, 0x38, 0x01, 0x3b, 0x6d, 0x96, 0xc4, 0x11, 0xef, 0xec, 0xef,
              0x17, 0xec, 0xef, 0xe3, 0xca, 0x00, 0x04, 0xce, 0x89, 0x79, 0xea,
              0x25, 0x0a, 0x89, 0x79, 0x95, 0xf9, 0x79, 0xa9, 0x0a, 0xd9, 0xa9,
              0xa9, 0x05, 0x0a, 0x89, 0x0a, 0xc5, 0xa9, 0xc9, 0x45, 0xa9, 0x40,
              0xc1, 0xa2, 0xfc, 0xd2, 0xbc, 0x14, 0x85, 0x8c, 0xd4, 0xa2, 0x54,
              0x7b, 0x2e, 0x00>>]
    bdata = refarm |> B64.to_binl
    assert e_bdt_l == bdata
  end

  # feed function with bad data
  test "to_binl_baddata" do
    refarm_bad = ["-----BEGIN PGP MESSAGE-----\n",
              "Version: OpenPrivacy 0.99\n",
              "\n",
              "wDgBO22WxBHv7O8X7O/jygAEzol56iUKiXmV+XmpCtmpqQUKiQrFqclFqUDBovzS\n",
              "vBSFjNSiVHsuAA==\n",
              "=njUN\n",
              "-----END PGP MESSAGE-----\n"]
    assert_raise(RuntimeError, "Error: bad checksum for base64 data",
                  fn -> B64.to_binl(refarm_bad) end )
  end


  ## Test for armor_head_tail? function
  test "armor_head_tail_basic" do
    assert false == B64.armor_head_tail?("FOO")
    assert true == B64.armor_head_tail?("----- FOO -----")
  end

  ## Test for blank? function
  test "blank_basic" do
    assert false == B64.blank?("FOO")
    assert true == B64.blank?("  \n  ")
  end

  ## Test for get_checksum_crc24 function
  test "get_checksum_crc24" do
    bdata = <<0xc8, 0x38, 0x01, 0x3b, 0x6d, 0x96, 0xc4, 0x11, 0xef, 0xec, 0xef,
            0x17, 0xec, 0xef, 0xe3, 0xca, 0x00, 0x04, 0xce, 0x89, 0x79, 0xea,
            0x25, 0x0a, 0x89, 0x79, 0x95, 0xf9, 0x79, 0xa9, 0x0a, 0xd9, 0xa9,
            0xa9, 0x05, 0x0a, 0x89, 0x0a, 0xc5, 0xa9, 0xc9, 0x45, 0xa9, 0x40,
            0xc1, 0xa2, 0xfc, 0xd2, 0xbc, 0x14, 0x85, 0x8c, 0xd4, 0xa2, 0x54,
            0x7b, 0x2e, 0x00>>
    e_cs = <<0x9e, 0x35, 0x0d>>
    assert e_cs == B64.get_checksum_crc24(bdata)
  end

  ## Test for check_checksum_crc24 function
  test "check_checksum_crc24_ok" do
    bdata = <<0xc8, 0x38, 0x01, 0x3b, 0x6d, 0x96, 0xc4, 0x11, 0xef, 0xec, 0xef,
            0x17, 0xec, 0xef, 0xe3, 0xca, 0x00, 0x04, 0xce, 0x89, 0x79, 0xea,
            0x25, 0x0a, 0x89, 0x79, 0x95, 0xf9, 0x79, 0xa9, 0x0a, 0xd9, 0xa9,
            0xa9, 0x05, 0x0a, 0x89, 0x0a, 0xc5, 0xa9, 0xc9, 0x45, 0xa9, 0x40,
            0xc1, 0xa2, 0xfc, 0xd2, 0xbc, 0x14, 0x85, 0x8c, 0xd4, 0xa2, 0x54,
            0x7b, 0x2e, 0x00>>
    e_cs = <<0x9e, 0x35, 0x0d>>
    assert :ok == B64.check_checksum_crc24(bdata, e_cs)
  end

  test "check_checksum_crc24_bad" do
    bdata = <<0xd8, 0x38, 0x01, 0x3b, 0x6d, 0x96, 0xc4, 0x11, 0xef, 0xec, 0xef,
            0x17, 0xec, 0xef, 0xe3, 0xca, 0x00, 0x04, 0xce, 0x89, 0x79, 0xea,
            0x25, 0x0a, 0x89, 0x79, 0x95, 0xf9, 0x79, 0xa9, 0x0a, 0xd9, 0xa9,
            0xa9, 0x05, 0x0a, 0x89, 0x0a, 0xc5, 0xa9, 0xc9, 0x45, 0xa9, 0x40,
            0xc1, 0xa2, 0xfc, 0xd2, 0xbc, 0x14, 0x85, 0x8c, 0xd4, 0xa2, 0x54,
            0x7b, 0x2e, 0x00>>
    e_cs = <<0x9e, 0x35, 0x0d>>
    assert_raise(RuntimeError, "Error: bad checksum for base64 data",
                 fn -> B64.check_checksum_crc24(bdata, e_cs) end )
  end

end
